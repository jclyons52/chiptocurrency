{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["cryptoName","Behind","rate","max","current","offset","H1Behind","styled","h1","props","App","useState","setOffset","useEffect","window","onscroll","pageYOffset","fieldRef","React","useRef","setTimeout","scroll","scrollToBottom","duration","className","style","zIndex","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAIMA,EAAa,iBAEbC,EAAkE,SAAC,GAIlE,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,IAGSC,EADL,EADJC,OAE6BH,EAAQ,IACvC,OAAO,cAACI,EAAD,CAAUD,OAAQD,EAAUD,EAAMC,EAAUD,EAA5C,SAAmDH,KAGpDM,EAAWC,IAAOC,GAAV,uIACmB,SAACC,GAAD,OAA8BA,EAAMJ,UAuCtDK,MAlCf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACNN,EADM,KACEO,EADF,KAGbC,qBAAU,WACRC,OAAOC,SAAW,WAChBH,EAAUE,OAAOE,gBAElB,IACH,IAAMC,EAAWC,IAAMC,OAAyB,MAShD,OARAN,qBAAU,WACRO,YAAW,WACLH,EAASb,SACXiB,gBAAOC,eAAe,CAAEC,SAAU,QAElC,OAEH,IAED,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,iBACf,oBAAIC,MAAO,CAAEC,OAAQ,GAArB,SAA4B1B,IAC5B,cAAC,EAAD,CAAQE,KAAM,EAAGC,IAAK,IAAKE,OAAQA,IACnC,cAAC,EAAD,CAAQH,KAAM,EAAGC,IAAK,IAAKE,OAAQA,IACnC,cAAC,EAAD,CAAQH,KAAM,EAAGC,IAAK,IAAKE,OAAQA,IACnC,qBAAKmB,UAAU,qBAEjB,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,SAAUG,IAAKV,EAA9B,qBCnCOW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.99561553.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { animateScroll as scroll } from 'react-scroll'\n\nconst cryptoName = \"CHIPTOCURRENCY\";\n\nconst Behind: React.FC<{ rate: number; max: number; offset: number }> = ({\n  rate,\n  max,\n  offset,\n}) => {\n     const current = (offset / rate) - 150;\nreturn <H1Behind offset={current < max ? current : max} >{cryptoName}</H1Behind>\n};\n\nconst H1Behind = styled.h1`\n  transform: translate3d(-5px, ${(props: { offset: number}) => props.offset}px, 0px) scale(0.99705);\n  color: #009fff82;\n  margin-bottom: -275px;\n`;\n\nfunction App() {\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    window.onscroll = () => {\n      setOffset(window.pageYOffset);\n    };\n  }, []);\n  const fieldRef = React.useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    setTimeout(()=>{\n      if (fieldRef.current) {\n        scroll.scrollToBottom({ duration: 3000 });\n      }\n     }, 4000)\n    \n  }, []);\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"upper-border\"></div>\n        <h1 style={{ zIndex: 2 }} >{cryptoName}</h1>\n        <Behind rate={2} max={100} offset={offset} />\n        <Behind rate={3} max={150} offset={offset} />\n        <Behind rate={4} max={200} offset={offset} />\n        <div className=\"bottom-border\"></div>\n      </div>\n      <div className=\"container\">\n        <div className=\"circle\"  ref={fieldRef}>C</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}